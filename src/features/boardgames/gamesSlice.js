// import { BOARDGAMES } from '../../app/shared/BOARDGAMES';
// import { db } from '../../firebase.config';
// import { collection, getDocs } from 'firebase/firestore';
import { mapImageURL} from '../../utils/mapImageURL';
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { createSelector } from 'reselect';
import { 
    fetchBoardgames as fetchBoardgamesAPI, 
    addBoardgame as addBoardgameAPI, 
    removeBoardgame as removeBoardgameAPI,
    updateBoardgame as updateBoardgameAPI
} from '../../services/boardgamesAPI';

export const fetchBoardgamesThunk = createAsyncThunk(
    'boardgames/fetchBoardgames',
    async () => {
        const boardgames = await fetchBoardgamesAPI();
        return mapImageURL(boardgames);
    }
);

export const addBoardgameThunk = createAsyncThunk(
    'boardgames/addBoardgame',
    async ({ boardgame, token }) => {
        const boardgameData = await addBoardgameAPI(boardgame, token);
        return boardgameData;
    }
);

export const removeBoardgameThunk = createAsyncThunk(
    'boardgames/removeBoardgame',
    async ({ boardgameId, token }) => {
        await removeBoardgameAPI(boardgameId, token);
        return boardgameId;
    }
);

export const updateBoardgameThunk = createAsyncThunk(
    'boardgames/updateBoardgame',
    async ({ boardgameId, boardgame, token }) => {
        const updatedBoardgame = await updateBoardgameAPI(boardgameId, boardgame , token);
        return updatedBoardgame;
    }
);

const initialState = {
    boardgamesArray: [],
    isLoading: true,
    errMsg: ''
}

const boardgamesSlice = createSlice({
    name: 'boardgames',
    initialState,
    reducers: {},
    extraReducers: (builder) => {
        builder
            .addCase(fetchBoardgamesThunk.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchBoardgamesThunk.fulfilled, (state, action) => {
                state.isLoading = false;
                state.errMsg = '';
                state.boardgamesArray = action.payload;
            })
            .addCase(fetchBoardgamesThunk.rejected, (state, action) => {
                state.isLoading = false;
                state.errMsg = action.error ? action.error.message : 'Fetch failed';
            })
            .addCase(addBoardgameThunk.fulfilled, (state, action) => {
                state.boardgamesArray.push(action.payload);
            })
            .addCase(removeBoardgameThunk.fulfilled, (state, action) => {
                state.boardgamesArray = state.boardgamesArray.filter(
                    game => game.id !== action.payload
                );
            })
            .addCase(updateBoardgameThunk.fulfilled, (state, action) => {
                const updatedBoardgame = action.payload;
                const index = state.boardgamesArray.findIndex(game => game.id === updatedBoardgame.id);
                if (index !== -1) {
                    state.boardgamesArray[index] = {
                        ...state.boardgamesArray[index],
                        ...updatedBoardgame
                    };
                }
            });
    }
});

// boardgamesReducer is a reducer function generated by the createSlice function. It combines the reducer logic defined in the reducers object and the initial state into a single reducer function.
export const boardgamesReducer = boardgamesSlice.reducer;

// export const { addBoardgame, removeBoardgame } = boardgamesSlice.actions;

// These selector functions take the entire Redux state as an argument, represented by the (state) parameter. The selector function then accesses the relevant part of the state and returns the desired data.

export const selectAllBoardgames = (state) => {
    return state.boardgames.boardgamesArray;
}

export const selectBoardgameById = (id) => createSelector(
    (state) => state.boardgames.boardgamesArray,
    (boardgamesArray) => {
        return boardgamesArray.find((game) => game.id === id);
    }
);

export const selectRandomBoardgame = createSelector(
    (state) => state.boardgames.boardgamesArray,
    (boardgamesArray) => {
        return boardgamesArray[ Math.floor(Math.random() * boardgamesArray.length) ];
    }
);