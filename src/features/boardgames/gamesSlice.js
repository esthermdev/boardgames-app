// import { BOARDGAMES } from '../../app/shared/BOARDGAMES';
import { baseUrl } from '../../app/shared/baseUrl.js';
import { mapImageURL } from '../../utils/mapImageURL';
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { createSelector } from 'reselect';

export const fetchBoardgames = createAsyncThunk(
    'boardgames/fetchBoardgames',
    async () => {
        const response = await fetch(baseUrl + 'boardgames'); // edit this line to get data from firestore
        if (!response.ok) {
            return Promise.reject('Unable to fetch, status: ' + response.status);
        }
        const data = await response.json();
        return data;
    }
);

const initialState = {
    boardgamesArray: [],
    isLoading: true,
    errMsg: ''
}

const boardgamesSlice = createSlice({
    name: 'boardgames',
    initialState,
    reducers: {},
    extraReducers: (builder) => {
        builder
            .addCase(fetchBoardgames.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchBoardgames.fulfilled, (state, action) => {
                state.isLoading = false;
                state.errMsg = '';
                state.boardgamesArray = mapImageURL(action.payload);
            })
            .addCase(fetchBoardgames.rejected, (state, action) => {
                state.isLoading = false;
                state.errMsg = action.error ? action.error.message : 'Fetch failed';
            })
    }
});

// boardgamesReducer is a reducer function generated by the createSlice function. It combines the reducer logic defined in the reducers object and the initial state into a single reducer function.
export const boardgamesReducer = boardgamesSlice.reducer;

// These selector functions take the entire Redux state as an argument, represented by the (state) parameter. The selector function then accesses the relevant part of the state and returns the desired data.

export const selectAllBoardgames = (state) => {
    return state.boardgames.boardgamesArray;
}

export const selectBoardgameById = (id) => createSelector(
    (state) => state.boardgames.boardgamesArray,
    (boardgamesArray) => {
        return boardgamesArray.find((game) => game.id === parseInt(id));
    }
);

export const selectRandomBoardgame = createSelector(
    (state) => state.boardgames.boardgamesArray,
    (boardgamesArray) => {
        return boardgamesArray[ Math.floor(Math.random() * boardgamesArray.length) ];
    }
);